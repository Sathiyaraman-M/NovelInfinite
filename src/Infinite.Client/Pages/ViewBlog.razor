@page "/Blog/{Id:guid}"
@using Infinite.Shared.Entities
@using Markdig
@attribute [AllowAnonymous]
@if (Blog is not null)
{
    <PageContent PageTitle="@Blog.Title">
        <ChildContent>
            <h1>@Blog.Title</h1>
            <div class="card">
                <div class="card-body">
                    @(new MarkupString(Markdown.ToHtml(Blog.Markdown)))
                </div>
            </div>
        </ChildContent>
    </PageContent>
@*     <MudToolBar> *@
@*         <MudText>@Blog.AuthorName</MudText> *@
@*         <MudText Typo="Typo.caption">Created on @Blog.CreatedDate.ToString("dd/MM/yyyy")</MudText> *@
@*         <MudSpacer /> *@
@*         <MudToggleIconButton T="bool" Icon="@Icons.Material.Outlined.BookmarkAdd" Color="Color.Default"  *@
@*                              ToggledIcon="@Icons.Material.Filled.BookmarkAdded" ToggledColor="Color.Secondary" /> *@
@*     </MudToolBar> *@
@*     <MudText Typo="Typo.h6">More from the author</MudText> *@
@*     @if (RecentFromAuthor != null) *@
@*     { *@
@*         @foreach (var blog in RecentFromAuthor) *@
@*         { *@
@*             <div class="me-2" style="display: inline-block; min-width: 400px;"> *@
@*                 <MudCard Class="pa-2" Outlined Elevation="0"> *@
@*                     <MudCardHeader> *@
@*                         <MudText Typo="Typo.h6">@blog.Title</MudText> *@
@*                     </MudCardHeader> *@
@*                     <MudCardContent> *@
@*                         <MudText Typo="Typo.body1">This is your latest blog.</MudText> *@
@*                         <MudText Typo="Typo.body1">Have a glance.</MudText> *@
@*                     </MudCardContent> *@
@*                     <MudCardActions> *@
@*                         <MudButton Color="Color.Tertiary" Variant="Variant.Filled" DisableElevation *@
@*                                    Href="@($"/blog/{blog.Id}")">Go to Blog</MudButton> *@
@*                     </MudCardActions> *@
@*                 </MudCard> *@
@*             </div> *@
@*         } *@
@*     } *@
}
else
{
     <Progress Indeterminate Color="TablerColor.Secondary" Size="ProgressSize.Small" /> 
}

@code 
{
    [Parameter]
    public Guid Id { get; set; }
    private Blog Blog { get; set; }
    private List<Blog> RecentFromAuthor { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var result = await PublicHttpClient.HttpClient.GetFromJsonAsync<Result<Blog>>($"api/blog/{Id}");
        if (result!.Succeeded)
        {
            Blog = result.Data;
            var recentResult = await PublicHttpClient.HttpClient.GetFromJsonAsync<Result<List<Blog>>>($"api/blog/recent?id={Id}");
            if (recentResult!.Succeeded)
            {
                RecentFromAuthor = recentResult.Data;
            }
        }
        else
        {
            foreach (var message in result.Messages)
            {
                await ToastService.AddToastAsync(new ToastModel("Error", "", message));
            }
            NavigationManager.NavigateTo("/Explore");
        }
        await base.OnInitializedAsync();
    }
}