@page "/Personal/Portfolio"
@using Infinite.Client.Extensions
@layout EditorLayout
<MudAppBar Dense>
    <MudIconButton Edge="Edge.Start" Icon="Icons.Material.Filled.ArrowBack" Color="Color.Inherit" Href="/Personal/Manage" />
    <MudText Typo="Typo.h5" Class="ml-2">@ApplicationConstants.AppName</MudText>
    <MudSpacer/>
    @if (_isLoaded)
    {
        if (!_isEdit)
        {
            <MudText Typo="Typo.h6">Create a Portfolio</MudText>
        }
        else
        {
            <MudText Typo="Typo.h6">Edit your portfolio</MudText>
        }
    }
    <MudText></MudText>
    <MudSpacer/>
    <MudButton StartIcon="Icons.Material.Filled.Save" Color="Color.Inherit" OnClick="SaveAsync">Save</MudButton>
</MudAppBar>
<MudMainContent>
    <MudContainer MaxWidth="MaxWidth.False" Class="mt-4">
        @if (_isLoaded)
        {
            <MudGrid>
                <MudItem xs="12">
                    <MudTextField Value="_userPortFolioMd" Variant="Variant.Outlined" Margin="Margin.Dense" 
                                  Immediate Lines="10" />
                </MudItem>
                <MudItem xs="12">
                    <div style="height: 100%;overflow: hidden;box-sizing: border-box">
                        <MudPaper Class="pa-4" Outlined Elevation="0" Style="overflow: auto">
                            <MudMarkdown Value="@_userPortFolioMd"/>
                        </MudPaper>
                    </div>
                </MudItem>
            </MudGrid>
        }
        else
        {
            <MudProgressLinear Indeterminate Color="Color.Secondary"/>
        }
    </MudContainer>
</MudMainContent>

@code
{
    private string _userPortFolioMd;
    private bool _isLoaded;
    private bool _isEdit;

    protected override async Task OnInitializedAsync()
    {
        var result = await HttpClient.GetFromJsonAsync<Result<string>>("api/manage/portfolio");
        if (result!.Succeeded)
        {
            _userPortFolioMd = result.Data;
            if (!string.IsNullOrEmpty(_userPortFolioMd))
                _isEdit = true;
        }
        else
        {
            foreach (var message in result.Messages)
            {
                await ToastService.AddToastAsync(new ToastModel("Error", "", message));
            }
        }
        await base.OnInitializedAsync();
        _isLoaded = true;
    }

    private async Task SaveAsync()
    {
        var response = await HttpClient.PostAsJsonAsync("api/manage/portfolio", new { markdown = _userPortFolioMd });
        var result = await response.ToResult();
        if (result.Succeeded)
        {
            await ToastService.AddToastAsync(new ToastModel("Success", "", result.Messages.FirstOrDefault()));
            NavigationManager.NavigateTo("/Personal");
        }
        else
        {
            foreach (var message in result.Messages)
            {
                await ToastService.AddToastAsync(new ToastModel("Error", "", message));
            }
        }
    }
}