@page "/Personal/Blogs/New"
@page "/Personal/Blogs/{Id:guid}"
@using Infinite.Shared.Entities
@using Infinite.Client.Extensions
@using Infinite.Shared.Enums
@using Markdig
<PageContent PageTitle="Create New Blog">
    <ChildContent>
        <EditForm Model="Model" OnValidSubmit="SubmitAsync">
            <div class="d-flex justify-content-between my-2">
                <h1>Create New Blog</h1>
                <div class="d-flex">
                    <Button>Cancel</Button>
                    <Button BackgroundColor="TablerColor.Primary" class="mx-2">Save To Drafts</Button>
                    <Button Type="ButtonType.Submit" BackgroundColor="TablerColor.Success">Publish</Button>
                </div>
            </div>
            <div class="card">
                <div class="card-body">
                    <div class="row">
                        <div class="col-sm-12 col-md-9 mb-3">
                            <label class="form-label">Title</label>
                            <InputText @bind-Value="@Model.Title" class="form-control" />
                        </div>
                        <div class="col-sm-12 col-md-3 mb-3">
                            <label class="form-label">Visibility</label>
                            <InputSelect @bind-Value="@Model.Visibility" class="form-select form-control-sm">
                                <option value="@Visibility.Public">Public</option>
                                <option value="@Visibility.Private">Private</option>
                                <option value="@Visibility.Unlisted">Unlisted</option>
                            </InputSelect>
                        </div>
                        <div class="col-12 mb-3">
                            <label class="form-label">Content(In Markdown)</label>
                            <textarea @bind="@Model.Markdown" @bind:event="oninput" class="form-control" />
                        </div>
                        <div class="col-12 mb-3">
                            <label class="form-label">Preview</label>
                            <div class="card">
                                <div class="card-body">
                                    @(new MarkupString(Markdown.ToHtml(Model.Markdown ?? "")))
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </EditForm>
    </ChildContent>
</PageContent>

@code {

    [Parameter]
    public Guid? Id { get; set; }

    private Blog Model { get; set; } = new();

    protected override async Task OnParametersSetAsync()
    {
        if (Id != Guid.Empty && Id != null)
        {
            var result = await HttpClient.GetFromJsonAsync<Result<Blog>>($"api/blog/{Id}/personal");
            if (result!.Succeeded)
            {
                Model = result.Data;
            }
            else
            {
                foreach (var message in result.Messages)
                {
                    await ToastService.AddToastAsync(new ToastModel("Error", "", message));
                }
                NavigationManager.NavigateTo("/Personal");
            }
        }
        await base.OnParametersSetAsync();
    }

    private async Task SubmitAsync()
    {
        var response = await HttpClient.PostAsJsonAsync("api/blog/personal", Model);
        var result = await response.ToResult();
        if (result.Succeeded)
        {
            await ToastService.AddToastAsync(new ToastModel("Error", "", "Create a blog successfully"));
            NavigationManager.NavigateTo("/Personal");
        }
        else
        {
            foreach (var message in result.Messages)
            {
                await ToastService.AddToastAsync(new ToastModel("Error", "", message));
            }
        }
    }

}